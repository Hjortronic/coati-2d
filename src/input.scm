(declare (unit input)
	 (uses primitives))

(use sdl-base)

(define (poll-input-events)
  (let ((event (make-sdl-event)))
    (sdl-poll-event! event)
    (let ((type (sdl-event-type event)))
      (cond
       ;; Keyboard events (button mod)
       ((or (= type SDL_KEYDOWN)
            (= type SDL_KEYUP))
        (send-event (if (= type SDL_KEYUP) 'key-down 'key-down)
                    (sdl-event-sym event)
                    (sdl-event-mod event)))
       ;; Mouse motion event (vect)
       ((= type SDL_MOUSEMOTION)
        (send-event 'mouse-move (vect:create (sdl-event-x event)
                                             (sdl-event-y event))))
       ;; Mouse press event (button vect)
       ((or (= type SDL_MOUSEBUTTONDOWN)
            (= type SDL_MOUSEBUTTONUP))
        (send-event (if (= type SDL_MOUSEBUTTONDOWN) 'button-down 'button-up)
                    (sdl-event-button event)
                    (vect:create (sdl-event-x event)
                                 (sdl-event-y event))))))))
